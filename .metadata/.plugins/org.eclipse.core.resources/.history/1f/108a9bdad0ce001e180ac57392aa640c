package com.mml.www.handler;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mml.www.service.SpotifyAPIService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class TracksJSONHandler {
	
	@Autowired
	private SpotifyAPIService ssv; 
	
	@Autowired
	private AlbumsJSONHandler albumsJSONHandler;
	
	@Autowired
	private ArtistsJSONHandler artistsJSONHandler;
	
	public ResponseEntity<MultiValueMap<String, String>> tracksJSONHandler(String TracksData){
		
		//결과값 반환할 map 생성
		MultiValueMap<String, String> tracksMap = new LinkedMultiValueMap<String, String>();

		// Jackson ObjectMapper 생성
		ObjectMapper objectMapper = new ObjectMapper();
		
		try {
			//JSON 문자열을 Java 객체로 파싱
			Map<String, Object> TracksDataJSONMap = objectMapper.readValue(TracksData, new TypeReference<Map<String, Object>> () {});
			
			List<Map<String, Object>> traVOList = (List<Map<String, Object>>) TracksDataJSONMap.get("items");
			
			
			for(Map<String, Object> trVOMap : traVOList) {
				//각 객체별로 필요한 값 가져오기
				log.info("@@@@@@@@@@@@@@@@@@@@@@@@ tracks album >>"+trVOMap.get("album"));
				log.info("@@@@@@@@@@@@@@@@@@@@@@@@ tracks artists >>"+trVOMap.get("artists"));
				
				//album 오브젝트 안의 값 가져오기
				String albumArtistsExternalUrls;
				String albumArtistsHref;
				String albumArtistsId;
				String albumArtistsName;
				String albumArtistsType;
				String albumArtistsUri;
				
				String albumExternalUrls;
				String albumHref;
				String albumId;
				String albumImagesUrl;
				int albumImagesHeight;
				int albumsImagesWidth;
				String albumName;
				String albumReleaseDate;
				String albumReleaseDatePrecision;
				int albumTotalTracks;
				String albumType;
				String albumUri;
				
	            Object AlbumObj = (Object) trVOMap.get("album");
	            Map<String, Object> albumMap = (Map<String, Object>) AlbumObj;
	            log.info("!!!!!!!!!!!!!!!!!!!!!!! albumMap >> "+albumMap);
	            
	            for(String album : albumMap.keySet()) {
	            	
	            	Object externalUrlsObj = (Object) albumMap.get("external_urls");
	                Map<String, String> externalUrlsMap = (Map<String, String>) externalUrlsObj;
	                albumArtistsExternalUrls = externalUrlsMap.get("spotify");
	            	
	            	albumArtistsHref = (String) albumMap.get("href");
	            	albumArtistsId = (String) albumMap.get("id");
	            	albumArtistsName = (String) albumMap.get("name");
	            	albumArtistsType = (String) albumMap.get("type");
	            	albumArtistsUri = (String) albumMap.get("uri");
	            	
		            System.out.println("albumArtistsExternalUrls: " + albumArtistsExternalUrls);
		            System.out.println("albumArtistsHref: " + albumArtistsHref);
		            System.out.println("albumArtistsId: " + albumArtistsId);
		            System.out.println("albumArtistsName: " + albumArtistsName);
		            System.out.println("albumArtistsType: " + albumArtistsType);
		            System.out.println("albumArtistsUri: " + albumArtistsUri);
	            }
	            
	            Object externalUrlsObj = (Object) trVOMap.get("external_urls");
	            Map<String, String> externalUrlsMap = (Map<String, String>) externalUrlsObj;
	            albumExternalUrls = externalUrlsMap.get("spotify");
	            
	            albumHref = (String) trVOMap.get("href");
	            albumId = (String) trVOMap.get("id");
	            
	            //오브젝트 안의 배열 안의 오브젝트 값 가져오기
	            List<Object> imagesObjList = new ArrayList<Object> ((List<Object>) alVOMap.get("images"));
                for(Object imagesObj : imagesObjList) {
                	Map<String, Object> imagesMap = (Map<String, Object>) imagesObj;
	            	// height와 width 값 가져오기
	            	imagesHeight = (int) imagesMap.get("height");
	            	imagesWidth = (int) imagesMap.get("width");
	            	// height와 width가 640이면 데이터 출력
	            	if (imagesHeight == 640 && imagesWidth == 640) {
	            	    imagesUrl = (String) imagesMap.get("url");
	               }
	            }
	            
	            
				//배열 안의 값들 가져오기
//				for(Map<String, Object> album : albumList) {
//					//오브젝트 안의 오브젝트 값 가져오기
//					Object externalUrlsObj = (Object) album.get("external_urls");
//		               Map<String, String> externalUrlsMap = (Map<String, String>) externalUrlsObj;
//		               albumArtistsExternalUrls = externalUrlsMap.get("spotify");
//		            
//		               albumArtistsHref = (String) album.get("href");
//		               albumArtistsId = (String) album.get("id");
//		               albumArtistsName = (String) album.get("name");
//		               albumArtistsType = (String) album.get("type");
//		               albumArtistsUri = (String) album.get("uri");
//					
//		               
//		               System.out.println("albumArtistsExternalUrls: " + albumArtistsExternalUrls);
//		               System.out.println("albumArtistsHref: " + albumArtistsHref);
//		               System.out.println("albumArtistsId: " + albumArtistsId);
//		               System.out.println("albumArtistsName: " + albumArtistsName);
//		               System.out.println("albumArtistsType: " + albumArtistsType);
//		               System.out.println("albumArtistsUri: " + albumArtistsUri);
		               System.out.println("albumExternalUrls: " + albumExternalUrls);
		               System.out.println("albumHref: " + albumHref);
		               System.out.println("albumId: " + albumId);
		               System.out.println("albumImagesUrl: " + albumImagesUrl);
		               System.out.println("albumImagesHeight: " + albumImagesHeight);
		               System.out.println("albumsImagesWidth: " + albumsImagesWidth);
		               System.out.println("albumName: " + albumName);
		               System.out.println("albumReleaseDate: " + albumReleaseDate);
		               System.out.println("albumReleaseDatePrecision: " + albumReleaseDatePrecision);
		               System.out.println("albumTotalTracks: " + albumTotalTracks);
		               System.out.println("albumType: " + albumType);
		               System.out.println("albumUri: " + albumUri);				
		               
		               
//				}
				
				
				
//				trVOMap.get("artists");
				
				
				
				
			
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		return ResponseEntity.ok(tracksMap);
	}
	
	
	
}
