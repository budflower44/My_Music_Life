package com.mml.www.handler;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mml.www.service.SpotifyAPIService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class TracksJSONHandler {
	
	@Autowired
	private SpotifyAPIService ssv; 
	
	@Autowired
	private AlbumsJSONHandler albumsJSONHandler;
	
	@Autowired
	private ArtistsJSONHandler artistsJSONHandler;
	
	public ResponseEntity<MultiValueMap<String, String>> tracksJSONHandler(String TracksData){
		
		//결과값 반환할 map 생성
		MultiValueMap<String, String> tracksMap = new LinkedMultiValueMap<String, String>();

		// Jackson ObjectMapper 생성
		ObjectMapper objectMapper = new ObjectMapper();
		
		try {
			//JSON 문자열을 Java 객체로 파싱
			Map<String, Object> TracksDataJSONMap = objectMapper.readValue(TracksData, new TypeReference<Map<String, Object>> () {});
			
			List<Map<String, Object>> traVOList = (List<Map<String, Object>>) TracksDataJSONMap.get("items");
			
			for(Map<String, Object> trVOMap : traVOList) {
				//각 객체별로 필요한 값 가져오기
				log.info("@@@@@@@@@@@@@@@@@@@@@@@@ tracks album >>"+trVOMap.get("album"));
				log.info("@@@@@@@@@@@@@@@@@@@@@@@@ tracks artists >>"+trVOMap.get("artists"));
				
				//album 오브젝트 안의 값 가져오기
				String albumAlbumType;
				String albumArtistsExternalUrls;
				String albumArtistshref;
				String albumArtistsid;
				String alumbArtistsname;
				String albumArtistsType;
				String albumArtistsUri;
				
				List<Map<String, Object>> albumList = (List<Map<String, Object>>) trVOMap.get("album");
				
				for(Map<String, Object> album : albumList) {
					albumAlbumType = (String) album.get("album_type");
					
					//
					List<Object> imagesObjList = new ArrayList<Object> ((List<Object>) arVOMap.get("images"));
		               int imagesHeight = 0;
		               int imagesWidth = 0;
		               String imagesUrl = null;
		               for(Object imagesObj : imagesObjList) {
		            	   Map<String, Object> imagesMap = (Map<String, Object>) imagesObj;
		            	    // height와 width 값 가져오기
		            	    imagesHeight = (int) imagesMap.get("height");
		            	    imagesWidth = (int) imagesMap.get("width");
		            	    // height와 width가 640이면 데이터 출력
		            	    if (imagesHeight == 640 && imagesWidth == 640) {
		            	        imagesUrl = (String) imagesMap.get("url");
		            	    }
		               }
					
				}
				
				
				   System.out.println("ID: " + id);
	               System.out.println("external_urls: " + externalUrls);
	               System.out.println("album_type: " + albumType);
	               System.out.println("artistsExternalUrls: " + artistsExternalUrls);
	               System.out.println("artistsHref: " + artistsHref);
	               System.out.println("artistsId: " + artistsId);
	               System.out.println("artistsName: " + artistsName);
	               System.out.println("artistsType: " + artistsType);
	               System.out.println("artistsUri: " + imagesUrl);
	               System.out.println("imagesUrl: " + imagesUrl);
	   	           System.out.println("imagesHeight: " + imagesHeight);
	   	           System.out.println("imagesWidth: " + imagesWidth);
	               System.out.println("href: " + href);
	               System.out.println("name: " + name);
	               System.out.println("releaseDate: " + releaseDate);
	               System.out.println("releaseDatePrecision: " + releaseDatePrecision);
	               System.out.println("total_tracks: " + totalTracks);
	               System.out.println("type: " + type);
	               System.out.println("uri: " + uri);				
				
				trVOMap.get("artists");
				
				
				
				
			
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		return ResponseEntity.ok(tracksMap);
	}
	
	
	
}
