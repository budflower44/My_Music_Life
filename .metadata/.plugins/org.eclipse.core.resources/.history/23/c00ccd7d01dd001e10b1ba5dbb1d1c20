package com.mml.www.config;

import org.springframework.beans.factory.annotation.CustomAutowireConfigurer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter{
	
	//비밀번호 암호화 객체
	@Bean
	public PasswordEncoder bcPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	//SuccessHandler => 사용자 커스텀 설정
	@Bean
	public AuthenticationSuccessHandler authSucessHandler() {
		return new LoginSuccessHandler(); //직접 생성 
	}
	
	//FailureHandler => 사용자 커스텀 설정
	@Bean
	public AuthenticationFailureHandler authFailureHandler() {
		return new LoginFailHandler(); //직접 생성
	}
	
	//UserDetail => 사용자 커스텀 생성
	@Bean
	public UserDetailsService customUserService() {
		return new CustomAuthMemberService(); //직접 생성
	}

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		// TODO Auto-generated method stub
		super.configure(auth);
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		// 화면에서 설정되는 권한에 따른 주소 맵핑 설정
		//csrf() 공격에 대한 설정 막기
		http.csrf().disable();
		
		//승인 요청
		http.authorizeRequests().antMatchers("/member/list").hasRole("ADMIN")
			.antMatchers("/", "/mml/main").permitAll()
			.anyRequest().authenticated();
		
		//커스텀 로그인 페이지를 구성
		//Controller에 주소 요청 매핑이 같이 있어야 함. (필수)
		http.formLogin()
		.usernameParameter("nickNmae")
		.passwordParameter("pwd")
		.loginPage("/member/login")
		.successHandler(authSucessHandler())
		.failureHandler(authFailureHandler());
		
		
		
		super.configure(http);
	}
	
	
	
	
	
	
}
